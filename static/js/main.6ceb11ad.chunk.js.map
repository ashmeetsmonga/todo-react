{"version":3,"sources":["components/Item.module.css","components/Item.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","item","props","completed","classes","task","className","Item","join","children","Delete","onClick","delete","index","App","state","tasks","addItem","event","keyCode","newTasks","unshift","target","value","setState","deleteItem","ind","splice","taskList","this","map","id","key","type","onKeyUp","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,UAAY,wBAAwB,OAAS,qBAAqB,KAAO,qB,uNCehIC,EAbF,SAACC,GACb,IAAMC,EAAY,CAAEC,IAAQC,MAE5B,OACC,yBAAKC,UAAWF,IAAQG,MACvB,yBAAKD,UAAWH,EAAUK,KAAK,MAAON,EAAMO,UAC5C,4BAAQH,UAAWF,IAAQM,OAAQC,QAAS,kBAAMT,EAAMU,OAAOV,EAAMW,SAArE,YCmCYC,E,2MAvCdC,MAAQ,CACPC,MAAO,CAAE,cAAe,cAAe,aAAc,gBAAiB,kB,EAGvEC,QAAU,SAACC,GACV,GAAsB,KAAlBA,EAAMC,QAAgB,CACzB,IAAMC,EAAQ,YAAQ,EAAKL,MAAMC,OACjCI,EAASC,QAAQH,EAAMI,OAAOC,OAC9B,EAAKC,SAAS,CAAER,MAAOI,IACvBF,EAAMI,OAAOC,MAAQ,K,EAIvBE,WAAa,SAACC,GACb,IAAMN,EAAQ,YAAQ,EAAKL,MAAMC,OACjCI,EAASO,OAAOD,EAAK,GACrB,EAAKF,SAAS,CAAER,MAAOI,K,wEAGd,IAAD,OACFQ,EAAWC,KAAKd,MAAMC,MAAMc,KAAI,SAACzB,EAAM0B,GAAP,OACrC,kBAACxB,EAAD,CAAMyB,IAAKD,EAAIlB,MAAOkB,EAAInB,OAAQ,EAAKa,YACrCpB,MAIH,OACC,yBAAKC,UAAWF,IAAQU,KACvB,yCACA,6BACC,2BAAOmB,KAAK,OAAOC,QAAS,SAAChB,GAAD,OAAW,EAAKD,QAAQC,OAGpDU,O,GAlCaO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEpInBnD,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.6ceb11ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"Item_Item__L_qMg\",\"task\":\"Item_task__2_oEP\",\"completed\":\"Item_completed__2l3-N\",\"Delete\":\"Item_Delete__3jM5_\",\"Done\":\"Item_Done__1MeK4\"};","import React from 'react';\nimport classes from './Item.module.css';\n\nconst item = (props) => {\n\tconst completed = [ classes.task ];\n\n\treturn (\n\t\t<div className={classes.Item}>\n\t\t\t<div className={completed.join(' ')}>{props.children}</div>\n\t\t\t<button className={classes.Delete} onClick={() => props.delete(props.index)}>\n\t\t\t\tDelete\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default item;\n","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport Item from './components/Item';\n\nclass App extends Component {\n\tstate = {\n\t\ttasks: [ 'Go and play', 'Have Dinner', 'Study Hard', 'Sleep Soundly', 'Watch Witcher' ]\n\t};\n\n\taddItem = (event) => {\n\t\tif (event.keyCode === 13) {\n\t\t\tconst newTasks = [ ...this.state.tasks ];\n\t\t\tnewTasks.unshift(event.target.value);\n\t\t\tthis.setState({ tasks: newTasks });\n\t\t\tevent.target.value = '';\n\t\t}\n\t};\n\n\tdeleteItem = (ind) => {\n\t\tconst newTasks = [ ...this.state.tasks ];\n\t\tnewTasks.splice(ind, 1);\n\t\tthis.setState({ tasks: newTasks });\n\t};\n\n\trender() {\n\t\tconst taskList = this.state.tasks.map((task, id) => (\n\t\t\t<Item key={id} index={id} delete={this.deleteItem}>\n\t\t\t\t{task}\n\t\t\t</Item>\n\t\t));\n\n\t\treturn (\n\t\t\t<div className={classes.App}>\n\t\t\t\t<h1>Todo List</h1>\n\t\t\t\t<div>\n\t\t\t\t\t<input type=\"text\" onKeyUp={(event) => this.addItem(event)} />\n\t\t\t\t</div>\n\n\t\t\t\t{taskList}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};"],"sourceRoot":""}